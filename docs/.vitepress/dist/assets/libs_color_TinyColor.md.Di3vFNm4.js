import{_ as t,c as e,o as l,a5 as d}from"./chunks/framework.BhjPWYS5.js";const h=JSON.parse('{"title":"TinyColor","description":"","frontmatter":{},"headers":[],"relativePath":"libs/color/TinyColor.md","filePath":"libs/color/TinyColor.md"}'),a={name:"libs/color/TinyColor.md"},o=d('<h1 id="tinycolor" tabindex="-1">TinyColor <a class="header-anchor" href="#tinycolor" aria-label="Permalink to &quot;TinyColor&quot;">​</a></h1><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>构造颜色对象请不要直接 <code>new TinyColor()</code>，而是通过 <code>colorLib.tinyColor()</code> 函数创建。</p></div><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">必备</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">color</td><td style="text-align:left;">Any</td><td style="text-align:left;">否</td><td style="text-align:left;"><code>&#39;&#39;</code></td><td style="text-align:left;">处理后的输入颜色</td></tr><tr><td style="text-align:left;">opts</td><td style="text-align:left;">LColorOptions</td><td style="text-align:left;">否</td><td style="text-align:left;"><code>{} as LColorOptions</code></td><td style="text-align:left;">颜色配置</td></tr></tbody></table><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">originalInput</td><td style="text-align:left;">Any</td><td style="text-align:left;">传递到构造函数中用于创建 TinyColor 实例的原始输入</td></tr><tr><td style="text-align:left;">format</td><td style="text-align:left;">String</td><td style="text-align:left;">返回用于创建 TinyColor 实例的格式</td></tr><tr><td style="text-align:left;">isValid</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">一个布尔值，指示颜色是否成功被解析。注意：如果颜色无效，那么输出颜色值时默认黑色</td></tr></tbody></table><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">参数</th><th>返回值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">getBrightness</td><td style="text-align:left;">-</td><td>Number</td><td style="text-align:left;">返回颜色的感知亮度，范围从 0-255，这是根据 <a href="http://www.w3.org/TR/AERT#color-contrast" target="_blank" rel="noreferrer">Web内容无障碍指南（第1版）</a> 定义的。</td></tr><tr><td style="text-align:left;">isLight</td><td style="text-align:left;">-</td><td>Boolean</td><td style="text-align:left;">返回一个布尔值，指示颜色的感知亮度是否为浅色。</td></tr><tr><td style="text-align:left;">isDark</td><td style="text-align:left;">-</td><td>Boolean</td><td style="text-align:left;">返回一个布尔值，指示颜色的感知亮度是否为深色。</td></tr><tr><td style="text-align:left;">getLuminance</td><td style="text-align:left;">-</td><td>Number</td><td style="text-align:left;">返回颜色的感知亮度（luminance），范围从 0-1，这是根据 <a href="http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef" target="_blank" rel="noreferrer">Web内容无障碍指南（第2版）</a> 定义的。</td></tr><tr><td style="text-align:left;">getAlpha</td><td style="text-align:left;">-</td><td>Number</td><td style="text-align:left;">返回颜色的<code>alpha</code>（透明度）值，范围从 <code>0-1</code>。</td></tr><tr><td style="text-align:left;">setAlpha</td><td style="text-align:left;"><code>(alpha: number)</code></td><td>-</td><td style="text-align:left;">在当前颜色上设置<code>alpha</code>（透明度）值。接受的范围是 <code>0-1</code> 之间。</td></tr><tr><td style="text-align:left;">onBackground</td><td style="text-align:left;"><code>(background: any)</code></td><td>-</td><td style="text-align:left;">计算颜色在背景上的显示效果。当颜色完全透明（即 <code>getAlpha() == 0</code>）时，结果将是背景颜色。当颜色完全不透明（即 <code>getAlpha() == 1</code>）时，结果将是颜色本身。否则，你将得到一个计算结果。</td></tr><tr><td style="text-align:left;">toHsv</td><td style="text-align:left;">-</td><td>HSVA</td><td style="text-align:left;">转为 <code>HSVA</code> 颜色对象</td></tr><tr><td style="text-align:left;">toHsvString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>HSVA</code> 颜色字符串</td></tr><tr><td style="text-align:left;">toHsl</td><td style="text-align:left;">-</td><td>HSLA</td><td style="text-align:left;">转为 <code>HSLA</code> 颜色对象</td></tr><tr><td style="text-align:left;">toHslString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>HSLA</code> 颜色字符串</td></tr><tr><td style="text-align:left;">toNumber</td><td style="text-align:left;">-</td><td>Number</td><td style="text-align:left;">转为数字</td></tr><tr><td style="text-align:left;">toHex</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>Hex</code> 颜色（不带 <code>#</code> ）</td></tr><tr><td style="text-align:left;">toHexString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>Hex</code> 颜色字符串（带 <code>#</code> ）</td></tr><tr><td style="text-align:left;">toHex8</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>Hex</code> 颜色（不带 <code>#</code> 、有透明度）</td></tr><tr><td style="text-align:left;">toHex8String</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>Hex</code> 颜色（带 <code>#</code> 、有透明度）</td></tr><tr><td style="text-align:left;">toHexShortString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">根据颜色的透明度（<code>alpha</code> 值）返回较短的十六进制值，并且带 <code>#</code></td></tr><tr><td style="text-align:left;">toRgb</td><td style="text-align:left;">-</td><td>RGBA</td><td style="text-align:left;">转为 <code>RGBA</code> 颜色对象</td></tr><tr><td style="text-align:left;">toRgbString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">转为 <code>RGBA</code> 颜色字符串</td></tr><tr><td style="text-align:left;">toPercentageRgb</td><td style="text-align:left;">-</td><td>RGBAString</td><td style="text-align:left;">将当前颜色转换为百分比表示的 <code>RGBA</code></td></tr><tr><td style="text-align:left;">toPercentageRgbString</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">将当前颜色转换为百分比表示的 <code>RGBA</code></td></tr><tr><td style="text-align:left;">toName</td><td style="text-align:left;">-</td><td>String</td><td style="text-align:left;">尽可能转换为颜色名称</td></tr><tr><td style="text-align:left;">toString</td><td style="text-align:left;"><code>(format: string)</code></td><td>String</td><td style="text-align:left;">根据输入格式打印成字符串。你也可以通过向函数中传入以下之一来覆盖这个行为：<code>&quot;rgb&quot;, &quot;prgb&quot;, &quot;hex6&quot;, &quot;hex3&quot;, &quot;hex8&quot;, &quot;name&quot;, &quot;hsl&quot;, &quot;hsv&quot;</code></td></tr><tr><td style="text-align:left;">lighten</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从0到100）淡化颜色。提供100将始终返回白色.</td></tr><tr><td style="text-align:left;">brighten</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从0到100）调高颜色亮度。提供100将始终返回白色.</td></tr><tr><td style="text-align:left;">darken</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从0到100）深化颜色。提供100将始终返回白色.</td></tr><tr><td style="text-align:left;">tint</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">将颜色与纯白色混合，范围从0到100。提供0将不进行任何操作，提供100将始终返回白色.</td></tr><tr><td style="text-align:left;">shade</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">将颜色与纯黑色混合，范围从0到100。提供0将不进行任何操作，提供100将始终返回黑色.</td></tr><tr><td style="text-align:left;">desaturate</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从0到100）降低颜色的饱和度。提供100将与调用<code>greyscale</code>相同。</td></tr><tr><td style="text-align:left;">saturate</td><td style="text-align:left;"><code>(amount: Number = 10)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从0到100）增加颜色的饱和度。</td></tr><tr><td style="text-align:left;">greyscale</td><td style="text-align:left;">-</td><td>TinyColor</td><td style="text-align:left;">完全降低颜色的饱和度，使其变为灰度。与调用<code>desaturate(100)</code>相同。</td></tr><tr><td style="text-align:left;">spin</td><td style="text-align:left;"><code>(amount: Number = 0)</code></td><td>TinyColor</td><td style="text-align:left;">根据给定的量（从-360到360）旋转色相。调用时使用0、360或-360将不进行任何操作（因为它将色相设置回原来的值）。</td></tr><tr><td style="text-align:left;">mix</td><td style="text-align:left;"><code>(amount: Number = 50)</code></td><td>TinyColor</td><td style="text-align:left;">将当前颜色与另一种颜色按给定量（从0到100）混合。0表示不混合（返回当前颜色）。</td></tr><tr><td style="text-align:left;">analogous</td><td style="text-align:left;"><code>(results: Number = 6, slices: Number = 30)</code></td><td>TinyColor[]</td><td style="text-align:left;">生成一组与当前颜色相似的颜色。这些颜色在色相环上是相邻的，形成一个类似于彩虹的颜色序列。<br>results - 要生成的相似颜色的数量；<br>slices - 将色相环划分为多少个部分</td></tr><tr><td style="text-align:left;">monochromatic</td><td style="text-align:left;"><code>(results: Number = 6)</code></td><td>TinyColor[]</td><td style="text-align:left;">生成一组与当前颜色具有相同色相和饱和度的颜色。这些颜色的亮度值不同，形成一个单色调的颜色序列。<br>results - 要生成的单色调颜色的数量</td></tr><tr><td style="text-align:left;">splitcomplement</td><td style="text-align:left;">-</td><td>TinyColor[]</td><td style="text-align:left;">生成当前颜色的分裂补色。分裂补色是指在色相环上位于当前颜色的两侧的颜色，它们的色相差为 180°。</td></tr><tr><td style="text-align:left;">triad</td><td style="text-align:left;">-</td><td>TinyColor[]</td><td style="text-align:left;">生成当前颜色的三色调。</td></tr><tr><td style="text-align:left;">tetrad</td><td style="text-align:left;">-</td><td>TinyColor[]</td><td style="text-align:left;">生成当前颜色的四色调。</td></tr><tr><td style="text-align:left;">polyad</td><td style="text-align:left;"><code>(n: number)</code></td><td>TinyColor[]</td><td style="text-align:left;">生成当前颜色的 <code>n</code> 色调。</td></tr><tr><td style="text-align:left;">complement</td><td style="text-align:left;">-</td><td>TinyColor</td><td style="text-align:left;">计算当前颜色的补色。</td></tr><tr><td style="text-align:left;">equals</td><td style="text-align:left;"><code>(color?:any)</code></td><td>Boolean</td><td style="text-align:left;">判断两色是否相同</td></tr><tr><td style="text-align:left;">clone</td><td style="text-align:left;">-</td><td>TinyColor</td><td style="text-align:left;">使用相同的颜色实例化一个新的TinyColor对象。对新的对象的任何更改都不会影响旧的对象。</td></tr><tr><td style="text-align:left;">contrasting</td><td style="text-align:left;">-</td><td>TinyColor</td><td style="text-align:left;">获取以当前颜色为背景时前景的最佳颜色（黑色或白色）。即判断黑色与白色哪一个与当前颜色的视觉对比最大。</td></tr></tbody></table>',8),n=[o];function i(r,s,g,y,x,f){return l(),e("div",null,n)}const u=t(a,[["render",i]]);export{h as __pageData,u as default};
