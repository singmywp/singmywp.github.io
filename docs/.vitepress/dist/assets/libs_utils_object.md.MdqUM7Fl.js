import{_ as t,c as a,o as e,a5 as d}from"./chunks/framework.BhjPWYS5.js";const q=JSON.parse('{"title":"snu.formatNumber()","description":"","frontmatter":{},"headers":[],"relativePath":"libs/utils/object.md","filePath":"libs/utils/object.md"}'),h={name:"libs/utils/object.md"},r=d('<h1 id="snu-formatnumber" tabindex="-1">snu.formatNumber() <a class="header-anchor" href="#snu-formatnumber" aria-label="Permalink to &quot;snu.formatNumber()&quot;">​</a></h1><h3 id="格式化数字" tabindex="-1"><strong>格式化数字</strong> <a class="header-anchor" href="#格式化数字" aria-label="Permalink to &quot;**格式化数字**&quot;">​</a></h3><p>返回给定数字的格式化结果，如果数字为整数，则返回整数部分；如果数字为小数，则返回原数字。</p><h3 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>num</td><td>Number</td><td>是</td><td>-</td><td>输入的数字。</td></tr></tbody></table><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>是</td><td>返回格式化后的数字。</td></tr></tbody></table><hr><h1 id="snu-deepclone" tabindex="-1">snu.deepClone() <a class="header-anchor" href="#snu-deepclone" aria-label="Permalink to &quot;snu.deepClone()&quot;">​</a></h1><h3 id="深拷贝-基础类型" tabindex="-1"><strong>深拷贝（基础类型）</strong> <a class="header-anchor" href="#深拷贝-基础类型" aria-label="Permalink to &quot;**深拷贝（基础类型）**&quot;">​</a></h3><p>使用 TypeScript 实现的深拷贝方法。（注意：通过JSON序列化实现，内部不能含有复杂对象和函数）</p><h3 id="兼容性-1" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-1" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td><code>T</code></td><td>是</td><td>-</td><td>需要深拷贝的对象</td></tr></tbody></table><h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td><code>T</code></td><td>是</td><td>返回深拷贝后的对象</td></tr></tbody></table><hr><h1 id="snu-rearray" tabindex="-1">snu.reArray() <a class="header-anchor" href="#snu-rearray" aria-label="Permalink to &quot;snu.reArray()&quot;">​</a></h1><h3 id="数组重装-数组浅拷贝" tabindex="-1"><strong>数组重装（数组浅拷贝）</strong> <a class="header-anchor" href="#数组重装-数组浅拷贝" aria-label="Permalink to &quot;**数组重装（数组浅拷贝）**&quot;">​</a></h3><p>将一个数组浅拷贝为一个新的数组，主要用于解决 uni-app 在 WEB 端自动将一些特殊数组转为特殊类型，导致无法使用例如 forEach, includes 等数组方法的问题。</p><h3 id="兼容性-2" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-2" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>oldArray</td><td><code>any[]</code></td><td>是</td><td>-</td><td>需要拷贝的数组</td></tr></tbody></table><h3 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td><code>any[]</code></td><td>是</td><td>返回一个新的数组，是 <code>oldArray</code> 的浅拷贝</td></tr></tbody></table><hr><h1 id="snu-shuffle" tabindex="-1">snu.shuffle() <a class="header-anchor" href="#snu-shuffle" aria-label="Permalink to &quot;snu.shuffle()&quot;">​</a></h1><h3 id="数组洗牌" tabindex="-1"><strong>数组洗牌</strong> <a class="header-anchor" href="#数组洗牌" aria-label="Permalink to &quot;**数组洗牌**&quot;">​</a></h3><p>使用 Fisher–Yates 算法对数组进行洗牌，打乱数组的顺序。</p><h3 id="兼容性-3" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-3" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-3" tabindex="-1">属性 <a class="header-anchor" href="#属性-3" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>arr</td><td><code>any[]</code></td><td>是</td><td>-</td><td>需要洗牌的数组</td></tr></tbody></table><h3 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td><code>any[]</code></td><td>是</td><td>返回洗牌后的数组</td></tr></tbody></table><hr><h1 id="snu-isnumber" tabindex="-1">snu.isNumber() <a class="header-anchor" href="#snu-isnumber" aria-label="Permalink to &quot;snu.isNumber()&quot;">​</a></h1><h3 id="是否为number类型" tabindex="-1"><strong>是否为Number类型</strong> <a class="header-anchor" href="#是否为number类型" aria-label="Permalink to &quot;**是否为Number类型**&quot;">​</a></h3><p>检查输入的值是否为 Number 类型。</p><h3 id="兼容性-4" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-4" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-4" tabindex="-1">属性 <a class="header-anchor" href="#属性-4" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>Any</td><td>否</td><td>是</td><td>-</td></tr></tbody></table><h3 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td>Boolean</td><td>是</td><td>如果是 Number 类型，返回 <code>true</code></td></tr></tbody></table><hr><h1 id="snu-setdataset" tabindex="-1">snu.setDataset() <a class="header-anchor" href="#snu-setdataset" aria-label="Permalink to &quot;snu.setDataset()&quot;">​</a></h1><h3 id="设置元素dataset" tabindex="-1"><strong>设置元素Dataset</strong> <a class="header-anchor" href="#设置元素dataset" aria-label="Permalink to &quot;**设置元素Dataset**&quot;">​</a></h3><p>设置UniElement的Dataset，主要用于解决 uni-app 在 WEB 端自动将 Dataset 转为特殊类型，导致无法使用例如 set, get 等方法的问题。</p><h3 id="兼容性-5" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-5" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-5" tabindex="-1">属性 <a class="header-anchor" href="#属性-5" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>el</td><td><code>UniElement</code></td><td>是</td><td>-</td><td>元素</td></tr><tr><td>key</td><td>String</td><td>是</td><td>-</td><td>键</td></tr><tr><td>value</td><td>Any</td><td>是</td><td>-</td><td>值</td></tr></tbody></table><h3 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>无</p><hr><h1 id="snu-getdataset" tabindex="-1">snu.getDataset() <a class="header-anchor" href="#snu-getdataset" aria-label="Permalink to &quot;snu.getDataset()&quot;">​</a></h1><h3 id="获取元素dataset" tabindex="-1"><strong>获取元素Dataset</strong> <a class="header-anchor" href="#获取元素dataset" aria-label="Permalink to &quot;**获取元素Dataset**&quot;">​</a></h3><p>获取UniElement的Dataset，主要用于解决 uni-app 在 WEB 端自动将 Dataset 转为特殊类型，导致无法使用例如 set, get 等方法的问题。</p><h3 id="兼容性-6" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性-6" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Web</th><th>Android</th></tr></thead><tbody><tr><td>√</td><td>√</td></tr></tbody></table><h3 id="属性-6" tabindex="-1">属性 <a class="header-anchor" href="#属性-6" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>el</td><td><code>UniElement</code></td><td>是</td><td>-</td><td>元素</td></tr><tr><td>key</td><td>String</td><td>是</td><td>-</td><td>键</td></tr></tbody></table><h3 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>必备</th><th>描述</th></tr></thead><tbody><tr><td>Any</td><td>是</td><td>返回元素Dataset的值</td></tr></tbody></table>',69),o=[r];function n(l,i,b,s,u,c){return e(),a("div",null,o)}const x=t(h,[["render",n]]);export{q as __pageData,x as default};
